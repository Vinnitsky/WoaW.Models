///////////////////////////////////////////////////////////
//  PartyRelationship.cs
//  Implementation of the Class PartyRelationship
//  Generated by Enterprise Architect
//  Created on:      15-May-2013 9:40:05 PM
//  Original author: Vladimir
///////////////////////////////////////////////////////////

using System;
using System.Linq;
using System.Collections.Generic;
using WoaW.Models.Parties.Root;
using WoaW.Models.Parties.Persons;
using WoaW.Models.Rules;

namespace WoaW.Models.Parties.Relationship
{
    public class PartyRelationship
    {
        public string Comment { get; set; }
        public System.DateTime FromDate { get; set; }
        public System.Guid Id { get; set; }
        public System.DateTime ThruDate { get; set; }
        public PartyRelationshipType Type { get; set; }
        public IEnumerable<PartyRole> Roles { get; set; }

        public PartyRelationship()
        {
            Id = Guid.NewGuid();
            Roles = new List<PartyRole>();
        }

        public PartyRelationship(PartyRelationshipType typ) : this()
        {
            Type = typ;
            Type.Relationship[Type.Title] = this;
        }

        public void AddRole(PartyRole role)
        {
            #region validate relationship role constraints
            List<PartyRelationshipConstraint> constraints = new List<PartyRelationshipConstraint>();
            var haveRole = Type.Constraints.Count(r => r.RoleType?.Id == role.Type.Id);
            if (haveRole == 0)
                throw new BreakPartyRelationshipConstraintException("can not containe type");

            foreach (var constraint in Type.Constraints)
            {
                if (constraint.Predicate != null && constraint.Predicate(this, role) == false)
                    constraints.Add(constraint);
            }
            if (constraints.Count > 0)
                throw new BreakPartyRelationshipConstraintException(constraints);

            #endregion

            (Roles as List<PartyRole>).Add(role);
            role.Relationship = this;
        }

        public IEnumerable<PartyRole> GetRoles() { return Roles; }
        public IEnumerable<PartyRole> GetRoles(Party party)
        {
            var roles = Roles.Where(r => r.Party.Id == party.Id);
            return roles;
        }
        public IEnumerable<Party> GetParticipiats()
        {
            return Roles.Select(r => r.Party);
        }
        public IEnumerable<Party> GetParticipiatsByRole(PartyRole role)
        {
            return Roles.Where(r => r.Id == role.Id).Select(r => r.Party);
        }

        public void Assign(PartyRole partyRole, Party party)
        {

            if (partyRole == null)
                throw new ArgumentNullException("partyRole");


            #region validate role for relationship
            if (partyRole.Relationship == null || partyRole.Relationship?.Id != Id)
                throw new ArgumentException("no relationship");

            //if (partyRole.Relationship == null)
            //    throw new ArgumentException("no relationship");

            var role = partyRole.Relationship.Roles.Count(r => r.Type.Id == partyRole.Type.Id);
            if (role == 0)
                throw new ArgumentException("no role in relationship");
            #endregion

            partyRole.Assign(party);
        }


        //public IDictionary<Party, IEnumerable<PartyRole>> GetParticipiatsWithRoles()
        //{
        //    return Roles.ToDictionary(r=>r.P);
        //}

    }//end PartyRelationship
}