///////////////////////////////////////////////////////////
//  PartyRole.cs
//  Implementation of the Class PartyRole
//  Generated by Enterprise Architect
//  Created on:      15-May-2013 9:40:05 PM
//  Original author: Vladimir
///////////////////////////////////////////////////////////

using System;
using System.Linq;
using System.Collections.Generic;
using WoaW.Models.Parties.Root;
using WoaW.Models.Rules;

namespace WoaW.Models.Parties.Relationship
{
    /// <summary>
    /// one party with one role can be once in one relation relationship
    /// </summary>
    public class PartyRole
    {
        private readonly PartyRoleIdentifier _id;
        /// <summary>
        /// here must be only one relationsgip but in PartyRoleType can be many
        /// </summary>
        public PartyRole()
        {
            _id = new PartyRoleIdentifier(Guid.NewGuid());
        }

        public PartyRole(PartyRoleType type) : this()
        {
            Type = type;
        }

        public PartyRelationship Relationship { get; set; }
        public Party Party { get; set; }
        public PartyRoleIdentifier Id { get { return _id; } }
        public PartyRoleType Type { get; set; }
        public System.DateTime FromDate { get; set; }
        public System.DateTime ThruDate { get; set; }

        internal void Assign(Party party)
        {
            if (party == null)
                throw new ArgumentNullException("party");

            #region validate relationship role constraints
            List<PartyRelationshipConstraint> constraints = new List<PartyRelationshipConstraint>();
            var haveRole = Relationship.Type.Constraints.Count(r => r.RoleType.Id == Type.Id);
            if (haveRole == 0)
                throw new BreakPartyRelationshipConstraintException("can not containe type");

            #endregion

            #region validate party role constraint
            List<PartyRoleConstraint> constraines = new List<PartyRoleConstraint>();
            foreach (var constraint in Type.RoleConstraints)
            {
                if (constraint.PartyType != party.GetType())
                    constraines.Add(constraint);
            }
            if (constraines.Count > 0)
                throw new BreakPartyRoleConstraintException(constraines);
            #endregion

            #region validate role for relationship
            //if (Relationship == null)
            //    throw new ArgumentException("no relationship");
            //var role = Relationship.Roles.SingleOrDefault(r => r.Type.Id == Type.Id);
            //if (role == null)
            //    throw new ArgumentException("no role in relationship");
            #endregion

            #region validate rules
            List<RuleSet> rules = new List<RuleSet>();
            foreach (var rule in Type.Rules)
            {
                if (rule.Predicate(party) == false)
                    rules.Add(rule);
            }

            if (rules.Count > 0)
                throw new BreakPartyRulesException(rules);

            #endregion

            Party = party;
        }

    }//end PartyRole
}
